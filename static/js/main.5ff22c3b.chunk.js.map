{"version":3,"sources":["utils.js","components/directoryListing.js","components/fileDetail.js","components/directoryDetail.js","App.js","registerServiceWorker.js","index.js"],"names":["compare","a","b","directory","directories","data","lastDirectory","forEach","item","index","file","files","filter","f","push","filesInfo","length","linesCovered","map","reduce","p","c","linesTotal","percent","parseInt","toFixed","directoryFiles","DirectoryListing","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSort","clickedColumn","_this$state","state","column","direction","setState","reverse","_","sortBy","changeDirectory","action","bind","assertThisInitialized","nextProps","nextState","_this2","_this$state2","react_default","createElement","Table","sortable","celled","collapsing","Header","Row","HeaderCell","sorted","onClick","Body","_ref","key","Cell","href","Component","FileDetail","className","name","Progress","color","size","progress","DirectoryDetail","total","lines","covered","rows","fileDetail","fileName","React","App","url","loadCoverageData","fetch","then","response","json","newData","keys","arr","split","pop","join","sort","processData","catch","err","console","error","toString","directoryListing_DirectoryListing","directoryDetail","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5ff22c3b.chunk.js","sourcesContent":["export const compare = (a,b) => {\n  if (a.directory < b.directory)\n    return -1\n  if (a.directory > b.directory)\n    return 1\n  return 0\n}\n\nexport const processData = (data) => {\n\n  var newData = []\n  Object.keys(data).forEach(function(key, index) {\n    var item = {}\n    var arr = key.split('/')\n    \n    item.key = key\n    item.fileName = arr.pop()\n    item.directory = arr.join('/') + '/'\n    item.linesCovered = data[key][0]\n    item.linesTotal = data[key][1]\n\n    newData.push(item)\n  })\n\n  return newData.sort(compare)\n}\n\nexport const filesInfo = (files) => {\n    var filesInfo = {}\n    \n    filesInfo.files = files.length   \n\n    filesInfo.linesCovered = files\n      .map(function(f) { return f.linesCovered })\n      .reduce(function(p, c) { return p + c })\n\n    filesInfo.linesTotal = files\n      .map(function(f) { return f.linesTotal })\n      .reduce(function(p, c) { return p + c })          \n        \n    filesInfo.percent = parseInt((( filesInfo.linesCovered / filesInfo.linesTotal ) * 100).toFixed(0), 10)\n\n    filesInfo.directory = files[0].directory\n\n    return filesInfo\n  }\n\nexport const directories = (data) => {\n    var lastDirectory = ''\n    var directories = []\n\n    data.forEach(function(item, index) {\n      var file = data[index]\n\n      if (file.directory !== lastDirectory) {\n        let files = data.filter(function (f) {\n          if (f.directory === file.directory ){\n            return f\n          }\n\n          return null\n        })\n        \n        directories.push( filesInfo(files) )\n      }\n\n      lastDirectory = file.directory\n    })\n    \n    return directories\n  }\n\n  export const directoryFiles = (data, directory) => {\n    var files = data.filter(function (f) {\n      if (f.directory === directory ) {\n        return f\n      }\n      return null\n    })\n\n    return files\n  }","import _ from 'lodash'\nimport React, { Component } from 'react'\nimport { Table } from 'semantic-ui-react'\n\nexport default class DirectoryListing extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.changeDirectory = this.props.action.bind(this);\n\n    this.state = {\n      column: null,\n      data: [],\n      direction: null,\n      directory: ''\n    }    \n  }\n  \n  handleSort = (clickedColumn)  => {\n    const { column, data, direction } = this.state\n    \n    if (column !== clickedColumn) {\n      this.setState({\n        column: clickedColumn,\n        data: _.sortBy(data, [clickedColumn]),\n        direction: 'ascending'\n      })\n\n      return\n    }\n\n    this.setState({\n      data: data.reverse(),\n      direction: direction === 'ascending' ? 'descending' : 'ascending'\n    })\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n     const { directory } = this.state\n\n    //dont change for directory click       \n    if(nextProps.directory !== directory){\n      return false\n    }\n    return true\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { column } = this.state\n\n    this.setState({\n        data: _.sortBy(nextProps.data, [column]),\n        directory: nextProps.directory\n    })\n  }\n\n  render() {\n    const { column, data, direction } = this.state\n    \n    return (\n      <Table sortable celled collapsing>\n         <Table.Header>\n          <Table.Row>\n             <Table.HeaderCell sorted={column === 'files' ? direction : null} onClick={()=>this.handleSort('files')}>\n              Files\n            </Table.HeaderCell>\n            <Table.HeaderCell sorted={column === 'directory' ? direction : null} onClick={()=>this.handleSort('directory')}>\n              Directory\n            </Table.HeaderCell>\n            <Table.HeaderCell sorted={column === 'percent' ? direction : null} onClick={()=>this.handleSort('percent')}>\n              Percent\n            </Table.HeaderCell> \n          </Table.Row>\n        </Table.Header>\n           <Table.Body>\n          {_.map(data, ({ directory, files, linesCovered, linesTotal, percent }) => (\n            <Table.Row key={directory}>\n              <Table.Cell>{files}</Table.Cell>\n              <Table.Cell>\n                <a href=\"#directoryDetails\" onClick={ ()=>this.changeDirectory(directory) }>\n                  {directory}\n                </a>  \n              </Table.Cell>\n              <Table.Cell>{percent}</Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>    \n      </Table>\n\n    )\n  }\n}\n","import React from 'react'\nimport { Progress } from 'semantic-ui-react'\n\nconst FileDetail = (props) => (\n  <div className=\"FileDetail\">\n    <span className=\"name\">{props.name}</span>\n    <span className=\"ratio\">{props.linesCovered} / {props.linesTotal}</span> \n    <br/>      \n     <Progress percent={props.percent} color='green' size='small' progress/> \n  </div>\n)\n\nexport default FileDetail","import React from 'react'\nimport FileDetail from './fileDetail'\n\nclass DirectoryDetail extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      files: [],\n      directory: ''\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      files: nextProps.files,\n      directory: nextProps.directory\n    })\n  }\n\n  render() {\n    const { files, directory } = this.state\n\n    let total = {\n      lines: 0,\n      covered: 0\n    }\n    let rows = []    \n    \n    files.forEach(function(item, index) {               \n      let percent = (( item.linesCovered / item.linesTotal ) * 100).toFixed(0)\n\n      total.lines = total.lines + item.linesTotal\n      total.covered = total.covered + item.linesCovered\n\n      rows.push(\n        <FileDetail key={item.key} percent={percent} name={item.fileName} linesCovered={item.linesCovered} linesTotal={item.linesTotal} />\n      )\n    })\n\n    return (      \n      <div>\n        <h2>{directory} <span className=\"ratio\"> { ((total.covered / total.lines) * 100).toFixed(0) } % </span></h2>\n\n        {rows}\n        <hr/>\n        <span className=\"ratio\">Total: {total.covered} / {total.lines}</span>\n\n      </div>\n    )\n  }\n}\n\nexport default DirectoryDetail","import React, { Component } from 'react';\nimport './css/App.css';\n\nimport {processData, directories, directoryFiles} from './utils';\nimport DirectoryListing from './components/directoryListing';\nimport DirectoryDetail from './components/directoryDetail';\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props)\n\n    this.state = { \n      data: [],\n      url: 'https://gist.githubusercontent.com/royletron/f535f03830c92cf840665831e8d3d528/raw/fa5a266b9039843a92a13161bb92a7affb1f3dfc/java.json',\n      directory: ''\n    }  \n\n    this.changeDirectory = this.changeDirectory.bind(this);    \n  }\n\n  componentDidMount() {\n    this.loadCoverageData();\n  }\n\n  changeDirectory(directory) {\n    this.setState({ directory: directory }); \n  }\n\n  loadCoverageData () {\n    fetch(this.state.url)\n      .then(response => response.json())\n      .then(data => { \n        data  = processData(data);\n        this.setState({ data: data }); \n        this.setState({ directory: data[0].directory }); \n\n      })      \n      .catch(err => console.error('Error:', err.toString() ))\n  }\n\n  render() {\n    const { data, directory } = this.state\n\n    return (\n      <div className=\"App\">\n        <div className=\"leftPanel\">\n           <DirectoryListing data={directories(data)} action={this.changeDirectory} directory={directory}/> \n        </div>\n\n        <div className=\"rightPanel\">      \n          <div className=\"detail\">\n             <DirectoryDetail files={directoryFiles(data, directory)} directory={directory} /> \n          </div>        \n        </div>      \n      </div> \n    )\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}